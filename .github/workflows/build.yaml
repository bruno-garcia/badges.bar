name: build
on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
  pull_request:
defaults:
  run:
    shell: bash
jobs:
  build:
    name: Build ${{matrix.sdk}} on ${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # TODO: cedx/setup-dart@v2 doesn't work on Windows (doesn't add pub to the PATH?)
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest, macos-latest]
        sdk: [beta, dev, stable]
        exclude:
          # Bad state: Could not run tests with Observatory enabled. Try setting a different port with --port option.
          - os: ubuntu-latest
            sdk: beta
          # hanging often
          - os: ubuntu-latest
            sdk: dev
          - os: macos-latest
            sdk: beta
    steps:
        - uses: cedx/setup-dart@v2
          with:
            release-channel: ${{ matrix.sdk }}
        - uses: actions/checkout@v2
        - run: pub get
        # Keeps hanging
        # - name: Test on Dart VM and collect code coverage
        #   run: pub run test_coverage
        - name: Test
          run: pub run test
        - uses: codecov/codecov-action@v1
        - name: Test on Chrome
          run: pub run test -p chrome test/*
        - run: dartanalyzer --fatal-warnings ./
        - run: dartfmt -n --set-exit-if-changed ./
  package-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: axel-op/dart-package-analyzer@v2
        id: analysis
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Check scores
        # TODO: Once 1.0.0 lands, change min maintenance points to 100
        run: |
          MAINTENANCE_SCORE=${{ steps.analysis.outputs.maintenance }}
          HEALTH_SCORE=${{ steps.analysis.outputs.health }}
          if (( $(echo "$MAINTENANCE_SCORE < 90" | bc) )) || (( $(echo "$HEALTH_SCORE < 100" | bc) ))
          then
            echo "Scores must be min 90 for maintenance (until 1.0 ships), 100 for health."
            exit 1
          fi
  docker:
    name: Build and push docker image
    needs: [build, package-analysis]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=brunogarcia/badges.bar
          VERSION=noop
          ENVIRONMENT=test
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            ENVIRONMENT=prod
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=environment::${ENVIRONMENT}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            ENVIRONMENT=${{ steps.prep.outputs.environment }}
            VERSION=${{ steps.prep.outputs.version }}
          platforms: linux/amd64,linux/386
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
      - name: Create Sentry release ${{ steps.prep.outputs.version }}
        # Only on version tags
        if: startsWith(github.ref, 'refs/tags/v')
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          # Why do I need to decide on that already? I'll promote envs without rebuild.
          environment: ${{ steps.prep.outputs.environment }}
          version: ${{ steps.prep.outputs.version }}